package com.aucloud.eth.contracts;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.StaticStruct;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.12.1.
 */
@SuppressWarnings("rawtypes")
public class TotoCoinToken extends Contract {
    public static final String BINARY = "6080604052600a805460ff19908116600117909155601080549091169055348015610028575f80fd5b50604051612d73380380612d7383398101604081905261004791610524565b338061006d57604051631e4fbdf760e01b81525f60048201526024015b60405180910390fd5b61007681610153565b5061008160016101a2565b61008b60026101a2565b61009560036101a2565b61009f60046101a2565b6100a960056101a2565b6100b360066101a2565b6100c66014600f601e600583600a6101ff565b600a80546001600160a01b0380851661010002610100600160a81b031990921691909117825582165f9081526003602052604090206001905562989680610118610111836012610485565b82906104c8565b6008555f859003610138576101306201518042610571565b600555610149565b6101456201518086610571565b6005555b50505050506105ce565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b5f816040516101b0906104fc565b908152602001604051809103905ff0801580156101cf573d5f803e3d5ffd5b505f928352600b602052604090922080546001600160a01b0319166001600160a01b039093169290921790915550565b8082848661020d898b610590565b6102179190610590565b6102219190610590565b61022b9190610590565b6102359190610590565b6064146102795760405162461bcd60e51b8152602060048201526012602482015271053756d206d75737420746f206265203130360741b6044820152606401610064565b60015f819052600d60209081527ffd54ff1ed53f34a900b24c5ba64f85761163b5d82d98a47b9bd80e45466993c5889055604080519283529082018890525f80516020612d53833981519152910160405180910390a160025f819052600d60209081527f10a81eed9d63d16face5e76357905348e6253d3394086026bb2bf2145d7cc249879055604080519283529082018790525f80516020612d53833981519152910160405180910390a160035f819052600d60209081527f26b4a10d0f0b04925c23bd4480ee147c916e5e87a7d68206a533dad160ac81e2869055604080519283529082018690525f80516020612d53833981519152910160405180910390a160045f819052600d60209081527fafafe8948a4ed9d478b1e9a5780b119b5edd00ea7d07bc35bef7c814824eb94b859055604080519283529082018590525f80516020612d53833981519152910160405180910390a160055f819052600d60209081527fa5049387d9cb649c59f4bda666105ba636c2a103d8e2b232ba4d125737cd2149849055604080519283529082018490525f80516020612d53833981519152910160405180910390a160065f819052600d60209081527fa48544818c2c710afa9849c61ec9c60e8acdb3eaa2885f33b37e118cc8fd04ac839055604080519283529082018390525f80516020612d53833981519152910160405180910390a1505050505050565b5f60015b82156104bf57826001166001036104a7576104a484826105a3565b90505b60019290921c916104b884806105a3565b9350610489565b90505b92915050565b5f825f036104d757505f6104c2565b5f6104e283856105a3565b9050826104ef8583610571565b146104bf576104bf6105ba565b61024380612b1083390190565b80516001600160a01b038116811461051f575f80fd5b919050565b5f805f60608486031215610536575f80fd5b8351925061054660208501610509565b915061055460408501610509565b90509250925092565b634e487b7160e01b5f52601160045260245ffd5b5f8261058b57634e487b7160e01b5f52601260045260245ffd5b500490565b808201808211156104c2576104c261055d565b80820281158282048414176104c2576104c261055d565b634e487b7160e01b5f52600160045260245ffd5b612535806105db5f395ff3fe608060405234801561000f575f80fd5b50600436106102cb575f3560e01c80637dfd65781161017b578063aecae36a116100e4578063dd336c121161009e578063f17cc3e911610079578063f17cc3e914610691578063f2fde38b146106a4578063f8a34b26146106b7578063ff8bc78e146106ca575f80fd5b8063dd336c121461061c578063dd62ed3e14610646578063efbd84001461067e575f80fd5b8063aecae36a146105c6578063be96a8bd146105cf578063c550fe95146105e2578063cbac458b14610601578063d0fd5ceb1461060a578063d98c4a4614610613575f80fd5b8063969e375611610135578063969e37561461055f578063a1545ef514610572578063a193be4d1461057a578063a34d42b81461058d578063a3a9c4fe146105a0578063a9059cbb146105b3575f80fd5b80637dfd6578146104e75780638456cb59146104fa57806387b22030146105025780638da5cb5b1461051557806392918f091461052f57806395d89b4114610537575f80fd5b80633f4ba83a1161023757806356cf12a0116101f157806365da5603116101cc57806365da56031461047a57806367cf05df1461048d57806370a08231146104b7578063715018a6146104df575f80fd5b806356cf12a0146104455780635c975abb14610458578063639c668b14610465575f80fd5b80633f4ba83a146103d857806340c10f19146103e05780634302caaf146103f35780634b2c0706146104005780634bb6640d146104135780634dac5d6114610426575f80fd5b806323b872dd1161028857806323b872dd1461037257806323e0661114610385578063313ce5671461038f57806332e38ed5146103a957806339dbcb63146103bc5780633b9af021146103cf575f80fd5b806301e33667146102cf57806306fdde03146102f7578063095ea7b314610327578063162574ea1461033a57806318160ddd1461034d57806318d10ee41461035f575b5f80fd5b6102e26102dd366004611fa6565b6106e9565b60405190151581526020015b60405180910390f35b61031a60405180604001604052806004815260200163544f544f60e01b81525081565b6040516102ee9190611fe0565b6102e2610335366004612015565b61079e565b6102e261034836600461203d565b6107fa565b6001545b6040519081526020016102ee565b6102e261036d36600461203d565b61084c565b6102e2610380366004611fa6565b61089d565b6103516201518081565b610397601281565b60405160ff90911681526020016102ee565b6102e26103b7366004612056565b6109ac565b6102e26103ca366004612015565b610a52565b61035160065481565b6102e2610b3d565b6102e26103ee366004612015565b610bf8565b600a546102e29060ff1681565b61035161040e366004612080565b610c3a565b6102e2610421366004612080565b610c75565b61035161043436600461203d565b60046020525f908152604090205481565b6102e2610453366004612080565b610cf1565b6010546102e29060ff1681565b6104786104733660046120a5565b610d60565b005b6102e2610488366004612080565b610e17565b61035161049b3660046120c0565b600e60209081525f928352604080842090915290825290205481565b6103516104c536600461203d565b6001600160a01b03165f9081526002602052604090205490565b6104786110ca565b6102e26104f536600461203d565b6110dd565b6102e261112b565b6102e261051036600461203d565b6111ba565b5f546040516001600160a01b0390911681526020016102ee565b6102e261120b565b61031a60405180604001604052806009815260200168544f544f626574613160b81b81525081565b61047861056d366004611fa6565b61126a565b610351611569565b6102e26105883660046120e0565b611578565b6102e261059b36600461203d565b6115f9565b6102e26105ae366004612167565b61163b565b6102e26105c1366004612015565b611730565b61035160075481565b6103516105dd36600461224b565b61178c565b6103516105f0366004612080565b600d6020525f908152604090205481565b61035160095481565b61035160085481565b61035160055481565b61035161062a36600461226c565b600f60209081525f928352604080842090915290825290205481565b61035161065436600461226c565b6001600160a01b039182165f908152600f6020908152604080832093909416825291909152205490565b6102e261068c366004612294565b6117c2565b61047861069f366004612167565b611801565b6104786106b236600461203d565b611900565b6104786106c5366004612015565b61193d565b6103516106d836600461203d565b60036020525f908152604090205481565b600a545f9061010090046001600160a01b031633146107235760405162461bcd60e51b815260040161071a906122d3565b60405180910390fd5b60405163a9059cbb60e01b81526001600160a01b0384811660048301526024820184905285169063a9059cbb906044016020604051808303815f875af115801561076f573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061079391906122f6565b506001949350505050565b5f60406107ac816004612329565b3610156107cb5760405162461bcd60e51b815260040161071a9061233c565b60105460ff16156107ee5760405162461bcd60e51b815260040161071a9061236b565b3361079381868661197a565b600a545f9061010090046001600160a01b0316331461082b5760405162461bcd60e51b815260040161071a906122d3565b506001600160a01b0381165f9081526004602052604081205560015b919050565b600a545f9061010090046001600160a01b0316331461087d5760405162461bcd60e51b815260040161071a906122d3565b506001600160a01b03165f90815260036020526040902060019081905590565b5f60606108ab816004612329565b3610156108ca5760405162461bcd60e51b815260040161071a9061233c565b60105460ff16156108ed5760405162461bcd60e51b815260040161071a9061236b565b6001600160a01b0385165f908152600f6020908152604080832033808552925290912054808511156109615760405162461bcd60e51b815260206004820181905260248201527f496e73756666696369656e742072656d61696e696e6720616c6c6f77616e6365604482015260640161071a565b61096b81866119da565b6001600160a01b038089165f908152600f60209081526040808320938716835292905220819055905061099f8787876119f5565b5060019695505050505050565b600a545f9061010090046001600160a01b031633146109dd5760405162461bcd60e51b815260040161071a906122d3565b5f838152600c602090815260409182902080546001600160a01b031981166001600160a01b038781169182179093558451929091168083529282015290917f29f58f86b2943cae1b6521820ed03ee25fc7fee72c9ff8b84c579deefd5f88d3910160405180910390a160019150505b92915050565b5f6040610a60816004612329565b361015610a7f5760405162461bcd60e51b815260040161071a9061233c565b60105460ff1615610aa25760405162461bcd60e51b815260040161071a9061236b565b335f818152600f602090815260408083206001600160a01b0389168452909152902054610acf81866119da565b6001600160a01b038381165f818152600f60209081526040808320948c16808452948252918290208590559051898152939450919290917fd5b4f0da4ef064198c4a3e1b30b61495b1c38a7b5f8334fcbb3e242f613a31c9910160405180910390a350600195945050505050565b600a545f9061010090046001600160a01b03163314610b6e5760405162461bcd60e51b815260040161071a906122d3565b60105460ff16610bc05760405162461bcd60e51b815260206004820152601860248201527f4d757374206265207573656420756e6465722070617573650000000000000000604482015260640161071a565b6010805460ff191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b33905f90a150600190565b600a545f9061010090046001600160a01b03163314610c295760405162461bcd60e51b815260040161071a906122d3565b610c338284611b09565b9392505050565b5f80610c4962015180846123a2565b9050600554811015610c5d57505f92915050565b600554610c6a90826123c1565b610c33906001612329565b600a545f9061010090046001600160a01b03163314610ca65760405162461bcd60e51b815260040161071a906122d3565b600780549083905560408051828152602081018590527fda12e6d0171f147ab36a74526e1198ba1150c94e79e4792e41bc9eda9686ccaa91015b60405180910390a150600192915050565b600a545f9061010090046001600160a01b03163314610d225760405162461bcd60e51b815260040161071a906122d3565b600880549083905560408051828152602081018590527f4f5669311001aeffcf75f64626d8b2b21a8b180c2102f3639b35961d1acad27c9101610ce0565b335f90815260046020526040902054600114610d8e5760405162461bcd60e51b815260040161071a906122d3565b600b5f846006811115610da357610da36123d4565b8152602081019190915260409081015f20549051636ce5768960e11b81526001600160a01b039091169063d9caed1290610de5903090869086906004016123e8565b5f604051808303815f87803b158015610dfc575f80fd5b505af1158015610e0e573d5f803e3d5ffd5b50505050505050565b5f610e20611ba2565b428210610e805760405162461bcd60e51b815260206004820152602860248201527f457863657074696f6e2063616c6c203a2063616e206e6f742061667465722074604482015267686520626c6f636b60c01b606482015260840161071a565b5f610e8a83610c3a565b90505f8111610eab5760405162461bcd60e51b815260040161071a9061240c565b6006548111610ecc5760405162461bcd60e51b815260040161071a9061240c565b600754600854600154610edf9190612329565b111580610eec5750600754155b610f2b5760405162461bcd60e51b815260206004820152601060248201526f141c9bd91d58dd1a5bdb88131a5b5a5d60821b604482015260640161071a565b610f3760085430611b09565b506008546009555f610f726064610f6c600d8460015b81526020019081526020015f2054600854611bce90919063ffffffff16565b90611c02565b9050610f818260015b83611c0e565b5f610f946064610f6c600d846002610f4d565b9050610fa1836002610f7b565b5f610fb46064610f6c600d846003610f4d565b9050610fc1846003610f7b565b5f610fd46064610f6c600d846004610f4d565b9050610fe1856004610f7b565b5f610ff46064610f6c600d846005610f4d565b9050611001866005610f7b565b5f6110146064610f6c600d846006610f4d565b9050611021876006610f7b565b5f61103b611031600a6012611c4c565b620f424090611bce565b90508060085411156110af57611064612710610f6c61270f600854611bce90919063ffffffff16565b60088190556009546040517f4f5669311001aeffcf75f64626d8b2b21a8b180c2102f3639b35961d1acad27c926110a2928252602082015260400190565b60405180910390a16110b5565b60088190555b50505060069490945550600195945050505050565b6110d2611ba2565b6110db5f611c86565b565b600a545f9061010090046001600160a01b0316331461110e5760405162461bcd60e51b815260040161071a906122d3565b506001600160a01b03165f90815260036020526040812055600190565b600a545f9061010090046001600160a01b0316331461115c5760405162461bcd60e51b815260040161071a906122d3565b60105460ff161561117f5760405162461bcd60e51b815260040161071a9061236b565b6010805460ff191660011790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff625905f90a150600190565b600a545f9061010090046001600160a01b031633146111eb5760405162461bcd60e51b815260040161071a906122d3565b506001600160a01b03165f90815260046020526040902060019081905590565b600a545f9061010090046001600160a01b0316331461123c5760405162461bcd60e51b815260040161071a906122d3565b600a5460ff161561125657600a805460ff19169055611264565b600a805460ff191660011790555b50600190565b6001600160a01b0382165f908152600360205260409020546001146112c15760405162461bcd60e51b815260206004820152600d60248201526c111bdb89dd081cdd5c1c1bdc9d609a1b604482015260640161071a565b600a5460ff166112ff5760405162461bcd60e51b81526020600482015260096024820152684e6f7420616c6c6f7760b81b604482015260640161071a565b604051636eb1769f60e11b81523360048201819052306024830152905f906001600160a01b0385169063dd62ed3e90604401602060405180830381865afa15801561134c573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113709190612450565b9050828110156113bb5760405162461bcd60e51b8152602060048201526016602482015275496e73756666696369656e7420616c6c6f77616e636560501b604482015260640161071a565b6040516323b872dd60e01b81525f906001600160a01b038616906323b872dd906113ed908690309089906004016123e8565b6020604051808303815f875af1158015611409573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061142d91906122f6565b90508061146e5760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b604482015260640161071a565b5f856001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114ab573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906114cf9190612467565b905084600a601260ff8416101561150d575f6114ec846012612487565b90505f6114fc8360ff8416611c4c565b90506115088982611bce565b935050505b601260ff84161115611546575f611525601285612487565b90505f6115358360ff8416611c4c565b90506115418982611c02565b935050505b61155182600a611bce565b915061155d828a611b09565b50505050505050505050565b5f61157342610c3a565b905090565b335f908152600460205260408120546001146115a65760405162461bcd60e51b815260040161071a906122d3565b5f600b5f8460068111156115bc576115bc6123d4565b815260208082019290925260409081015f908120546001600160a01b0316808252600290935220549091506115f18282611cd5565b949350505050565b600a545f9061010090046001600160a01b0316331461162a5760405162461bcd60e51b815260040161071a906122d3565b61163382611c86565b506001919050565b600a545f9061010090046001600160a01b0316331461166c5760405162461bcd60e51b815260040161071a906122d3565b5f838152600b60205260408120546001600160a01b0316905b835181101561079357816001600160a01b031663d9caed12308684815181106116b0576116b06124a0565b60200260200101515f01518785815181106116cd576116cd6124a0565b6020026020010151602001516040518463ffffffff1660e01b81526004016116f7939291906123e8565b5f604051808303815f87803b15801561170e575f80fd5b505af1158015611720573d5f803e3d5ffd5b5050600190920191506116859050565b5f604061173e816004612329565b36101561175d5760405162461bcd60e51b815260040161071a9061233c565b60105460ff16156117805760405162461bcd60e51b815260040161071a9061236b565b336107938186866119f5565b5f828152600e60205260408120818360068111156117ac576117ac6123d4565b81526020019081526020015f2054905092915050565b600a545f9061010090046001600160a01b031633146117f35760405162461bcd60e51b815260040161071a906122d3565b61099f878787878787611cec565b5f828152600c60205260409020546001600160a01b031633146118365760405162461bcd60e51b815260040161071a906122d3565b5f828152600b60205260408120546001600160a01b0316905b82518110156118fa57816001600160a01b031663d9caed123085848151811061187a5761187a6124a0565b60200260200101515f0151868581518110611897576118976124a0565b6020026020010151602001516040518463ffffffff1660e01b81526004016118c1939291906123e8565b5f604051808303815f87803b1580156118d8575f80fd5b505af11580156118ea573d5f803e3d5ffd5b50506001909201915061184f9050565b50505050565b611908611ba2565b6001600160a01b03811661193157604051631e4fbdf760e01b81525f600482015260240161071a565b61193a81611c86565b50565b335f9081526004602052604090205460011461196b5760405162461bcd60e51b815260040161071a906122d3565b6119758183611b09565b505050565b6001600160a01b038381165f818152600f602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b5f828211156119eb576119eb6124b4565b610c3382846123c1565b6001600160a01b0383165f9081526002602052604090205481811015611a525760405162461bcd60e51b8152602060048201526012602482015271496e73756666696369656e742066756e647360701b604482015260640161071a565b611a5c81836119da565b6001600160a01b038086165f908152600260205260408082209390935590851681522054611a8a9083611f72565b6001600160a01b038085165f8181526002602052604090819020939093559151908616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611add9086815260200190565b60405180910390a36001600160a01b0383166118fa57600154611b0090836119da565b60015550505050565b6001600160a01b0381165f908152600260205260408120548190611b2d9085611f72565b6001600160a01b0384165f90815260026020526040902055600154611b529085611f72565b6001556040518481526001600160a01b0380851691908316907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35060019392505050565b5f546001600160a01b031633146110db5760405163118cdaa760e01b815233600482015260240161071a565b5f825f03611bdd57505f610a4c565b5f611be883856124c8565b905082611bf585836123a2565b14610c3357610c336124b4565b5f806115f183856123a2565b5f828152600b60205260409020546001600160a01b0316611c303082846119f5565b505f928352600e60209081526040808520938552929052912055565b5f60015b8215610c335782600116600103611c6e57611c6b84826124c8565b90505b60019290921c91611c7f84806124c8565b9350611c50565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b5f80611ce28482856119f5565b5060019392505050565b80828486611cfa898b612329565b611d049190612329565b611d0e9190612329565b611d189190612329565b611d229190612329565b606414611d665760405162461bcd60e51b8152602060048201526012602482015271053756d206d75737420746f206265203130360741b604482015260640161071a565b60015f819052600d60209081527ffd54ff1ed53f34a900b24c5ba64f85761163b5d82d98a47b9bd80e45466993c5889055604080519283529082018890525f805160206124e0833981519152910160405180910390a160025f819052600d60209081527f10a81eed9d63d16face5e76357905348e6253d3394086026bb2bf2145d7cc249879055604080519283529082018790525f805160206124e0833981519152910160405180910390a160035f819052600d60209081527f26b4a10d0f0b04925c23bd4480ee147c916e5e87a7d68206a533dad160ac81e2869055604080519283529082018690525f805160206124e0833981519152910160405180910390a160045f819052600d60209081527fafafe8948a4ed9d478b1e9a5780b119b5edd00ea7d07bc35bef7c814824eb94b859055604080519283529082018590525f805160206124e0833981519152910160405180910390a160055f819052600d60209081527fa5049387d9cb649c59f4bda666105ba636c2a103d8e2b232ba4d125737cd2149849055604080519283529082018490525f805160206124e0833981519152910160405180910390a160065f819052600d60209081527fa48544818c2c710afa9849c61ec9c60e8acdb3eaa2885f33b37e118cc8fd04ac839055604080519283529082018390525f805160206124e0833981519152910160405180910390a1505050505050565b5f80611f7e8385612329565b905083811015610c3357610c336124b4565b80356001600160a01b0381168114610847575f80fd5b5f805f60608486031215611fb8575f80fd5b611fc184611f90565b9250611fcf60208501611f90565b929592945050506040919091013590565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b5f8060408385031215612026575f80fd5b61202f83611f90565b946020939093013593505050565b5f6020828403121561204d575f80fd5b610c3382611f90565b5f8060408385031215612067575f80fd5b8235915061207760208401611f90565b90509250929050565b5f60208284031215612090575f80fd5b5035919050565b803560078110610847575f80fd5b5f805f606084860312156120b7575f80fd5b611fc184612097565b5f80604083850312156120d1575f80fd5b50508035926020909101359150565b5f602082840312156120f0575f80fd5b610c3382612097565b634e487b7160e01b5f52604160045260245ffd5b6040805190810167ffffffffffffffff81118282101715612130576121306120f9565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561215f5761215f6120f9565b604052919050565b5f8060408385031215612178575f80fd5b82359150602083013567ffffffffffffffff811115612195575f80fd5b8301601f810185136121a5575f80fd5b803567ffffffffffffffff8111156121bf576121bf6120f9565b6121ce60208260051b01612136565b8082825260208201915060208360061b8501019250878311156121ef575f80fd5b6020840193505b8284101561223d576040848903121561220d575f80fd5b61221561210d565b61221e85611f90565b81526020858101358183015290835260409094019391909101906121f6565b809450505050509250929050565b5f806040838503121561225c575f80fd5b8235915061207760208401612097565b5f806040838503121561227d575f80fd5b61228683611f90565b915061207760208401611f90565b5f805f805f8060c087890312156122a9575f80fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b6020808252600990820152682337b93134b23232b760b91b604082015260600190565b5f60208284031215612306575f80fd5b81518015158114610c33575f80fd5b634e487b7160e01b5f52601160045260245ffd5b80820180821115610a4c57610a4c612315565b602080825260159082015274496e76616c69642073686f7274206164647265737360581b604082015260600190565b6020808252601c908201527f4d757374206265207573656420776974686f75742070617573696e6700000000604082015260600190565b5f826123bc57634e487b7160e01b5f52601260045260245ffd5b500490565b81810381811115610a4c57610a4c612315565b634e487b7160e01b5f52602160045260245ffd5b6001600160a01b039384168152919092166020820152604081019190915260600190565b60208082526024908201527f457863657074696f6e2063616c6c2074696d652c20496e2074686520636f6f6c60408201526334b7339760e11b606082015260800190565b5f60208284031215612460575f80fd5b5051919050565b5f60208284031215612477575f80fd5b815160ff81168114610c33575f80fd5b60ff8281168282160390811115610a4c57610a4c612315565b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52600160045260245ffd5b8082028115828204841417610a4c57610a4c61231556fe65525c4344e1510cbcb49446b3e59d9e5d61b3ecf75222378bcf63ff40cf3b63a2646970667358221220f0a428727bcd071f7567aa657f7fca17976b44b79f4f8692b83d4a93f9e6ce9e64736f6c634300081a00336080604052348015600e575f80fd5b50604051610243380380610243833981016040819052602b916043565b600180546001600160a01b031916331790555f556059565b5f602082840312156052575f80fd5b5051919050565b6101dd806100665f395ff3fe608060405234801561000f575f80fd5b5060043610610034575f3560e01c80633e0dc34e14610038578063d9caed1214610052575b5f80fd5b6100405f5481565b60405190815260200160405180910390f35b610065610060366004610148565b610067565b005b60015433906001600160a01b031681146100b65760405162461bcd60e51b815260206004820152600c60248201526b2737ba1036bc9037bbb732b960a11b604482015260640160405180910390fd5b60405163a9059cbb60e01b81526001600160a01b0384811660048301526024820184905285169063a9059cbb906044016020604051808303815f875af1158015610102573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101269190610181565b5050505050565b80356001600160a01b0381168114610143575f80fd5b919050565b5f805f6060848603121561015a575f80fd5b6101638461012d565b92506101716020850161012d565b9150604084013590509250925092565b5f60208284031215610191575f80fd5b815180151581146101a0575f80fd5b939250505056fea2646970667358221220e7b1eb2f8209a3c0749a2dceba2e4f738cd77197a6c1cc989822cdb16656f47d64736f6c634300081a003365525c4344e1510cbcb49446b3e59d9e5d61b3ecf75222378bcf63ff40cf3b63";

    private static String librariesLinkedBinary;

    public static final String FUNC_PRODUCE_PERIOD = "PRODUCE_PERIOD";

    public static final String FUNC__ALLOWANCE = "_allowance";

    public static final String FUNC_ADDAUTHORIZEDCONTRACTADDRESS = "addAuthorizedContractAddress";

    public static final String FUNC_ADDEXCHARGECONTRACTADDRESS = "addExchargeContractAddress";

    public static final String FUNC_ALLOWEXCHANGE = "allowExchange";

    public static final String FUNC_ALLOWANCE = "allowance";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_AUTHORIZEDCONTRACTADDRESS = "authorizedContractAddress";

    public static final String FUNC_AUTOAIRDROP = "autoAirDrop";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BURNPOOL = "burnPool";

    public static final String FUNC_CONFIGUREPOOLAUTOADDRESS = "configurePoolAutoAddress";

    public static final String FUNC_DAYPOOLPRODUCTION = "dayPoolProduction";

    public static final String FUNC_DECIMALS = "decimals";

    public static final String FUNC_DECREASEAPPROVE = "decreaseApprove";

    public static final String FUNC_DISTRIBUTE = "distribute";

    public static final String FUNC_EXCHANGE = "exchange";

    public static final String FUNC_GETDAYS = "getDays";

    public static final String FUNC_GETPERIOD = "getPeriod";

    public static final String FUNC_GETPOOLPRODUCTINBYPERIOD = "getPoolProductinByPeriod";

    public static final String FUNC_INITIALPERIOD = "initialPeriod";

    public static final String FUNC_LASTPRODUCEPERIOD = "lastProducePeriod";

    public static final String FUNC_LASTPRODUCTION = "lastProduction";

    public static final String FUNC_MINT = "mint";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_NEXTPRODUCTION = "nextProduction";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PAUSE = "pause";

    public static final String FUNC_PAUSED = "paused";

    public static final String FUNC_POOLDISTRIBUTEPROPORTION = "poolDistributeProportion";

    public static final String FUNC_PRESALE = "presale";

    public static final String FUNC_PRODUCE = "produce";

    public static final String FUNC_PRODUCTIONLIMIT = "productionLimit";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_SETCONTRACTOWNER = "setContractOwner";

    public static final String FUNC_SETNEXTPRODUCTION = "setNextProduction";

    public static final String FUNC_SETPOOLDISTRIBUTEPROPORTION = "setPoolDistributeProportion";

    public static final String FUNC_SETPRODUCTIONLIMIT = "setProductionLimit";

    public static final String FUNC_SUBAUTHORIZEDCONTRACTADDRESS = "subAuthorizedContractAddress";

    public static final String FUNC_SUBEXCHARGECONTRACTADDRESS = "subExchargeContractAddress";

    public static final String FUNC_SUPPORTEDEXCHARGECONTRACTADDRESS = "supportedExchargeContractAddress";

    public static final String FUNC_SWITCHEXCHANGE = "switchExchange";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_TRANSFER = "transfer";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_TRANSFERSTAKEPOOL = "transferStakePool";

    public static final String FUNC_UNPAUSE = "unpause";

    public static final String FUNC_WITHDRAWTOKEN = "withdrawToken";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event DECREASEAPPROVE_EVENT = new Event("DecreaseApprove", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event NEXTPRODUCTIONCHANGE_EVENT = new Event("NextProductionChange", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event PAUSE_EVENT = new Event("Pause", 
            Arrays.<TypeReference<?>>asList());
    ;

    public static final Event POOLAUTOADDRESSCHANGE_EVENT = new Event("PoolAutoAddressChange", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event POOLDISTRIBUTEPROPORTIONCHANGE_EVENT = new Event("PoolDistributeProportionChange", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event PRODUCTIONLIMITCHANGE_EVENT = new Event("ProductionLimitChange", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event UNPAUSE_EVENT = new Event("Unpause", 
            Arrays.<TypeReference<?>>asList());
    ;

    @Deprecated
    protected TotoCoinToken(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected TotoCoinToken(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected TotoCoinToken(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected TotoCoinToken(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<ApprovalEventResponse> getApprovalEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ApprovalEventResponse getApprovalEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVAL_EVENT, log);
        ApprovalEventResponse typedResponse = new ApprovalEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getApprovalEventFromLog(log));
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public static List<DecreaseApproveEventResponse> getDecreaseApproveEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(DECREASEAPPROVE_EVENT, transactionReceipt);
        ArrayList<DecreaseApproveEventResponse> responses = new ArrayList<DecreaseApproveEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DecreaseApproveEventResponse typedResponse = new DecreaseApproveEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._spender = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static DecreaseApproveEventResponse getDecreaseApproveEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(DECREASEAPPROVE_EVENT, log);
        DecreaseApproveEventResponse typedResponse = new DecreaseApproveEventResponse();
        typedResponse.log = log;
        typedResponse._owner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse._spender = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse._value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<DecreaseApproveEventResponse> decreaseApproveEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getDecreaseApproveEventFromLog(log));
    }

    public Flowable<DecreaseApproveEventResponse> decreaseApproveEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DECREASEAPPROVE_EVENT));
        return decreaseApproveEventFlowable(filter);
    }

    public static List<NextProductionChangeEventResponse> getNextProductionChangeEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(NEXTPRODUCTIONCHANGE_EVENT, transactionReceipt);
        ArrayList<NextProductionChangeEventResponse> responses = new ArrayList<NextProductionChangeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NextProductionChangeEventResponse typedResponse = new NextProductionChangeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.beforeValue = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.afterValue = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static NextProductionChangeEventResponse getNextProductionChangeEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(NEXTPRODUCTIONCHANGE_EVENT, log);
        NextProductionChangeEventResponse typedResponse = new NextProductionChangeEventResponse();
        typedResponse.log = log;
        typedResponse.beforeValue = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.afterValue = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<NextProductionChangeEventResponse> nextProductionChangeEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getNextProductionChangeEventFromLog(log));
    }

    public Flowable<NextProductionChangeEventResponse> nextProductionChangeEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEXTPRODUCTIONCHANGE_EVENT));
        return nextProductionChangeEventFlowable(filter);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
        OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public static List<PauseEventResponse> getPauseEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(PAUSE_EVENT, transactionReceipt);
        ArrayList<PauseEventResponse> responses = new ArrayList<PauseEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PauseEventResponse typedResponse = new PauseEventResponse();
            typedResponse.log = eventValues.getLog();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static PauseEventResponse getPauseEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(PAUSE_EVENT, log);
        PauseEventResponse typedResponse = new PauseEventResponse();
        typedResponse.log = log;
        return typedResponse;
    }

    public Flowable<PauseEventResponse> pauseEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getPauseEventFromLog(log));
    }

    public Flowable<PauseEventResponse> pauseEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PAUSE_EVENT));
        return pauseEventFlowable(filter);
    }

    public static List<PoolAutoAddressChangeEventResponse> getPoolAutoAddressChangeEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(POOLAUTOADDRESSCHANGE_EVENT, transactionReceipt);
        ArrayList<PoolAutoAddressChangeEventResponse> responses = new ArrayList<PoolAutoAddressChangeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PoolAutoAddressChangeEventResponse typedResponse = new PoolAutoAddressChangeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.beforeValue = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.afterValue = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static PoolAutoAddressChangeEventResponse getPoolAutoAddressChangeEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(POOLAUTOADDRESSCHANGE_EVENT, log);
        PoolAutoAddressChangeEventResponse typedResponse = new PoolAutoAddressChangeEventResponse();
        typedResponse.log = log;
        typedResponse.beforeValue = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.afterValue = (String) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<PoolAutoAddressChangeEventResponse> poolAutoAddressChangeEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getPoolAutoAddressChangeEventFromLog(log));
    }

    public Flowable<PoolAutoAddressChangeEventResponse> poolAutoAddressChangeEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(POOLAUTOADDRESSCHANGE_EVENT));
        return poolAutoAddressChangeEventFlowable(filter);
    }

    public static List<PoolDistributeProportionChangeEventResponse> getPoolDistributeProportionChangeEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(POOLDISTRIBUTEPROPORTIONCHANGE_EVENT, transactionReceipt);
        ArrayList<PoolDistributeProportionChangeEventResponse> responses = new ArrayList<PoolDistributeProportionChangeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PoolDistributeProportionChangeEventResponse typedResponse = new PoolDistributeProportionChangeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.poolId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.proportion = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static PoolDistributeProportionChangeEventResponse getPoolDistributeProportionChangeEventFromLog(
            Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(POOLDISTRIBUTEPROPORTIONCHANGE_EVENT, log);
        PoolDistributeProportionChangeEventResponse typedResponse = new PoolDistributeProportionChangeEventResponse();
        typedResponse.log = log;
        typedResponse.poolId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.proportion = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<PoolDistributeProportionChangeEventResponse> poolDistributeProportionChangeEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getPoolDistributeProportionChangeEventFromLog(log));
    }

    public Flowable<PoolDistributeProportionChangeEventResponse> poolDistributeProportionChangeEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(POOLDISTRIBUTEPROPORTIONCHANGE_EVENT));
        return poolDistributeProportionChangeEventFlowable(filter);
    }

    public static List<ProductionLimitChangeEventResponse> getProductionLimitChangeEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(PRODUCTIONLIMITCHANGE_EVENT, transactionReceipt);
        ArrayList<ProductionLimitChangeEventResponse> responses = new ArrayList<ProductionLimitChangeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ProductionLimitChangeEventResponse typedResponse = new ProductionLimitChangeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.beforeValue = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.afterValue = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ProductionLimitChangeEventResponse getProductionLimitChangeEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(PRODUCTIONLIMITCHANGE_EVENT, log);
        ProductionLimitChangeEventResponse typedResponse = new ProductionLimitChangeEventResponse();
        typedResponse.log = log;
        typedResponse.beforeValue = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.afterValue = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<ProductionLimitChangeEventResponse> productionLimitChangeEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getProductionLimitChangeEventFromLog(log));
    }

    public Flowable<ProductionLimitChangeEventResponse> productionLimitChangeEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PRODUCTIONLIMITCHANGE_EVENT));
        return productionLimitChangeEventFlowable(filter);
    }

    public static List<TransferEventResponse> getTransferEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TransferEventResponse getTransferEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRANSFER_EVENT, log);
        TransferEventResponse typedResponse = new TransferEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTransferEventFromLog(log));
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public static List<UnpauseEventResponse> getUnpauseEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(UNPAUSE_EVENT, transactionReceipt);
        ArrayList<UnpauseEventResponse> responses = new ArrayList<UnpauseEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UnpauseEventResponse typedResponse = new UnpauseEventResponse();
            typedResponse.log = eventValues.getLog();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static UnpauseEventResponse getUnpauseEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(UNPAUSE_EVENT, log);
        UnpauseEventResponse typedResponse = new UnpauseEventResponse();
        typedResponse.log = log;
        return typedResponse;
    }

    public Flowable<UnpauseEventResponse> unpauseEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getUnpauseEventFromLog(log));
    }

    public Flowable<UnpauseEventResponse> unpauseEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UNPAUSE_EVENT));
        return unpauseEventFlowable(filter);
    }

    public RemoteFunctionCall<BigInteger> PRODUCE_PERIOD() {
        final Function function = new Function(FUNC_PRODUCE_PERIOD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> _allowance(String param0, String param1) {
        final Function function = new Function(FUNC__ALLOWANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0), 
                new org.web3j.abi.datatypes.Address(160, param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> addAuthorizedContractAddress(
            String contractAddress) {
        final Function function = new Function(
                FUNC_ADDAUTHORIZEDCONTRACTADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, contractAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addExchargeContractAddress(
            String contractAddress) {
        final Function function = new Function(
                FUNC_ADDEXCHARGECONTRACTADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, contractAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> allowExchange() {
        final Function function = new Function(FUNC_ALLOWEXCHANGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> allowance(String _owner, String _spender) {
        final Function function = new Function(FUNC_ALLOWANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _owner), 
                new org.web3j.abi.datatypes.Address(160, _spender)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String _spender, BigInteger _value) {
        final Function function = new Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _spender), 
                new org.web3j.abi.datatypes.generated.Uint256(_value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> authorizedContractAddress(String param0) {
        final Function function = new Function(FUNC_AUTHORIZEDCONTRACTADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> autoAirDrop(BigInteger poolId,
            List<TransferInfo> transferInfos) {
        final Function function = new Function(
                FUNC_AUTOAIRDROP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(poolId), 
                new org.web3j.abi.datatypes.DynamicArray<TransferInfo>(TransferInfo.class, transferInfos)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String _owner) {
        final Function function = new Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> burnPool(BigInteger poolId) {
        final Function function = new Function(
                FUNC_BURNPOOL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint8(poolId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> configurePoolAutoAddress(BigInteger poolId,
            String autoAirDropAddress) {
        final Function function = new Function(
                FUNC_CONFIGUREPOOLAUTOADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(poolId), 
                new org.web3j.abi.datatypes.Address(160, autoAirDropAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> dayPoolProduction(BigInteger param0, BigInteger param1) {
        final Function function = new Function(FUNC_DAYPOOLPRODUCTION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0), 
                new org.web3j.abi.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> decimals() {
        final Function function = new Function(FUNC_DECIMALS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> decreaseApprove(String _spender,
            BigInteger _value) {
        final Function function = new Function(
                FUNC_DECREASEAPPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _spender), 
                new org.web3j.abi.datatypes.generated.Uint256(_value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> distribute(BigInteger poolId,
            List<TransferInfo> transferInfos) {
        final Function function = new Function(
                FUNC_DISTRIBUTE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(poolId), 
                new org.web3j.abi.datatypes.DynamicArray<TransferInfo>(TransferInfo.class, transferInfos)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> exchange(String spender, String contractAddress,
            BigInteger amount) {
        final Function function = new Function(
                FUNC_EXCHANGE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, spender), 
                new org.web3j.abi.datatypes.Address(160, contractAddress), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> getDays() {
        final Function function = new Function(FUNC_GETDAYS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getPeriod(BigInteger timestamp) {
        final Function function = new Function(FUNC_GETPERIOD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(timestamp)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getPoolProductinByPeriod(BigInteger period,
            BigInteger poolId) {
        final Function function = new Function(FUNC_GETPOOLPRODUCTINBYPERIOD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(period), 
                new org.web3j.abi.datatypes.generated.Uint8(poolId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> initialPeriod() {
        final Function function = new Function(FUNC_INITIALPERIOD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> lastProducePeriod() {
        final Function function = new Function(FUNC_LASTPRODUCEPERIOD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> lastProduction() {
        final Function function = new Function(FUNC_LASTPRODUCTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> mint(String spender, BigInteger _value) {
        final Function function = new Function(
                FUNC_MINT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, spender), 
                new org.web3j.abi.datatypes.generated.Uint256(_value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> nextProduction() {
        final Function function = new Function(FUNC_NEXTPRODUCTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> pause() {
        final Function function = new Function(
                FUNC_PAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> paused() {
        final Function function = new Function(FUNC_PAUSED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> poolDistributeProportion(BigInteger param0) {
        final Function function = new Function(FUNC_POOLDISTRIBUTEPROPORTION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> presale(String spender, BigInteger amount) {
        final Function function = new Function(
                FUNC_PRESALE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, spender), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> produce(BigInteger timestamp) {
        final Function function = new Function(
                FUNC_PRODUCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(timestamp)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> productionLimit() {
        final Function function = new Function(FUNC_PRODUCTIONLIMIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setContractOwner(String newOwner) {
        final Function function = new Function(
                FUNC_SETCONTRACTOWNER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setNextProduction(BigInteger productionAmount) {
        final Function function = new Function(
                FUNC_SETNEXTPRODUCTION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(productionAmount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setPoolDistributeProportion(
            BigInteger ozGroupProportion, BigInteger ozSupportProportion,
            BigInteger ozFundProportion, BigInteger stakeProportion, BigInteger ozbetProportion,
            BigInteger ozbetVipProportion) {
        final Function function = new Function(
                FUNC_SETPOOLDISTRIBUTEPROPORTION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(ozGroupProportion), 
                new org.web3j.abi.datatypes.generated.Uint256(ozSupportProportion), 
                new org.web3j.abi.datatypes.generated.Uint256(ozFundProportion), 
                new org.web3j.abi.datatypes.generated.Uint256(stakeProportion), 
                new org.web3j.abi.datatypes.generated.Uint256(ozbetProportion), 
                new org.web3j.abi.datatypes.generated.Uint256(ozbetVipProportion)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setProductionLimit(BigInteger productionLimitV) {
        final Function function = new Function(
                FUNC_SETPRODUCTIONLIMIT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(productionLimitV)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> subAuthorizedContractAddress(
            String contractAddress) {
        final Function function = new Function(
                FUNC_SUBAUTHORIZEDCONTRACTADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, contractAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> subExchargeContractAddress(
            String contractAddress) {
        final Function function = new Function(
                FUNC_SUBEXCHARGECONTRACTADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, contractAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> supportedExchargeContractAddress(String param0) {
        final Function function = new Function(FUNC_SUPPORTEDEXCHARGECONTRACTADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> switchExchange() {
        final Function function = new Function(
                FUNC_SWITCHEXCHANGE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> symbol() {
        final Function function = new Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> totalSupply() {
        final Function function = new Function(FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transfer(String _to, BigInteger _value) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _to), 
                new org.web3j.abi.datatypes.generated.Uint256(_value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String _from, String _to,
            BigInteger _value) {
        final Function function = new Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _from), 
                new org.web3j.abi.datatypes.Address(160, _to), 
                new org.web3j.abi.datatypes.generated.Uint256(_value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferStakePool(BigInteger poolId,
            String spender, BigInteger amount) {
        final Function function = new Function(
                FUNC_TRANSFERSTAKEPOOL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint8(poolId), 
                new org.web3j.abi.datatypes.Address(160, spender), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> unpause() {
        final Function function = new Function(
                FUNC_UNPAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> withdrawToken(String contractAddress,
            String targetAddress, BigInteger amount) {
        final Function function = new Function(
                FUNC_WITHDRAWTOKEN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, contractAddress), 
                new org.web3j.abi.datatypes.Address(160, targetAddress), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static TotoCoinToken load(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        return new TotoCoinToken(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static TotoCoinToken load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new TotoCoinToken(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static TotoCoinToken load(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        return new TotoCoinToken(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static TotoCoinToken load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new TotoCoinToken(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<TotoCoinToken> deploy(Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider, BigInteger initialTimestamp,
            String multiSignWalletAddress, String ozCoinAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(initialTimestamp), 
                new org.web3j.abi.datatypes.Address(160, multiSignWalletAddress), 
                new org.web3j.abi.datatypes.Address(160, ozCoinAddress)));
        return deployRemoteCall(TotoCoinToken.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    public static RemoteCall<TotoCoinToken> deploy(Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider,
            BigInteger initialTimestamp, String multiSignWalletAddress, String ozCoinAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(initialTimestamp), 
                new org.web3j.abi.datatypes.Address(160, multiSignWalletAddress), 
                new org.web3j.abi.datatypes.Address(160, ozCoinAddress)));
        return deployRemoteCall(TotoCoinToken.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<TotoCoinToken> deploy(Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit, BigInteger initialTimestamp,
            String multiSignWalletAddress, String ozCoinAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(initialTimestamp), 
                new org.web3j.abi.datatypes.Address(160, multiSignWalletAddress), 
                new org.web3j.abi.datatypes.Address(160, ozCoinAddress)));
        return deployRemoteCall(TotoCoinToken.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<TotoCoinToken> deploy(Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit,
            BigInteger initialTimestamp, String multiSignWalletAddress, String ozCoinAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(initialTimestamp), 
                new org.web3j.abi.datatypes.Address(160, multiSignWalletAddress), 
                new org.web3j.abi.datatypes.Address(160, ozCoinAddress)));
        return deployRemoteCall(TotoCoinToken.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    public static void linkLibraries(List<Contract.LinkReference> references) {
        librariesLinkedBinary = linkBinaryWithReferences(BINARY, references);
    }

    private static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    public static class TransferInfo extends StaticStruct {
        public String spender;

        public BigInteger amount;

        public TransferInfo(String spender, BigInteger amount) {
            super(new org.web3j.abi.datatypes.Address(160, spender), 
                    new org.web3j.abi.datatypes.generated.Uint256(amount));
            this.spender = spender;
            this.amount = amount;
        }

        public TransferInfo(Address spender, Uint256 amount) {
            super(spender, amount);
            this.spender = spender.getValue();
            this.amount = amount.getValue();
        }
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String spender;

        public BigInteger value;
    }

    public static class DecreaseApproveEventResponse extends BaseEventResponse {
        public String _owner;

        public String _spender;

        public BigInteger _value;
    }

    public static class NextProductionChangeEventResponse extends BaseEventResponse {
        public BigInteger beforeValue;

        public BigInteger afterValue;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class PauseEventResponse extends BaseEventResponse {
    }

    public static class PoolAutoAddressChangeEventResponse extends BaseEventResponse {
        public String beforeValue;

        public String afterValue;
    }

    public static class PoolDistributeProportionChangeEventResponse extends BaseEventResponse {
        public BigInteger poolId;

        public BigInteger proportion;
    }

    public static class ProductionLimitChangeEventResponse extends BaseEventResponse {
        public BigInteger beforeValue;

        public BigInteger afterValue;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger value;
    }

    public static class UnpauseEventResponse extends BaseEventResponse {
    }
}
