package com.aucloud.eth.contracts;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.StaticStruct;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.12.1.
 */
@SuppressWarnings("rawtypes")
public class WalletManagerContract extends Contract {
    public static final String BINARY = "608060405234801561000f575f80fd5b50338061003657604051631e4fbdf760e01b81525f60048201526024015b60405180910390fd5b61003f81610154565b5060048054600181810183555f8390527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b91820180546001600160a01b03199081167319c0947b0e1169c00854caf563e20d742c462ee6179091558354808301855583018054821673ab104736299169e3a252e32e49d6f302738327341790558354808301855583018054821673544d4e0cc6c1cd0d319f3ceb2a8dbba1b4de9dd2179055835491820190935501805490911690556100fc6101a3565b600280546001600160a01b0319166001600160a01b03929092169190911790556101246101a3565b600380546001600160a01b0319166001600160a01b039290921691909117905561014e600a6101e2565b5061032a565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b5f80306040516101b2906102f5565b6001600160a01b039091168152602001604051809103905ff0801580156101db573d5f803e3d5ffd5b5092915050565b60606101ec6102c7565b5f826001600160401b0381111561020557610205610302565b60405190808252806020026020018201604052801561022e578160200160208202803683370190505b5090505f5b838110156101db575f6102446101a3565b6001805480820182555f919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b038316179055835190915081908490849081106102a6576102a6610316565b6001600160a01b039092166020928302919091019091015250600101610233565b5f546001600160a01b031633146102f35760405163118cdaa760e01b815233600482015260240161002d565b565b6105be806122a083390190565b634e487b7160e01b5f52604160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b611f69806103375f395ff3fe608060405234801561000f575f80fd5b506004361061016d575f3560e01c8063b789cf84116100d9578063dd3cb74f11610093578063f2fde38b1161006e578063f2fde38b146102e9578063f59e38b7146102fc578063fac8c1461461031d578063ff03a0dd14610325575f80fd5b8063dd3cb74f146102bb578063e0511234146102c3578063ebc9769e146102d6575f80fd5b8063b789cf841461026a578063bcf0f5c11461027d578063c1d2985214610285578063c7d2383714610298578063d66bd39a146102ab578063d941ba99146102b3575f80fd5b806386c0bb921161012a57806386c0bb92146101f25780638da5cb5b1461020557806392e6eaf814610229578063a40e14241461023c578063a6e9947014610244578063b571548214610257575f80fd5b806301e33667146101715780634782f7791461018657806368e170a8146101995780636d2841bc146101b757806370a08231146101ca578063715018a6146101ea575b5f80fd5b61018461017f366004611543565b61032d565b005b610184610194366004611581565b6103a3565b6101a1610410565b6040516101ae91906115ab565b60405180910390f35b6101846101c536600461171f565b610478565b6101dd6101d8366004611759565b6104a0565b6040516101ae919061177b565b61018461059b565b61018461020036600461171f565b6105ae565b5f546001600160a01b03165b6040516001600160a01b0390911681526020016101ae565b6101846102373660046117c7565b61071f565b610211610742565b610184610252366004611759565b6107a3565b6101a1610265366004611814565b6107fc565b6101846102783660046117c7565b6108e2565b610211610ab2565b61018461029336600461182b565b610b36565b6101846102a6366004611759565b610c08565b610184610d05565b6101a1610dab565b610211610e11565b6101846102d136600461171f565b610e2a565b6101846102e4366004611759565b610e7d565b6101846102f7366004611759565b610f9c565b61030f61030a3660046118c5565b610fd6565b6040519081526020016101ae565b61021161106f565b6102116110f3565b61033561110c565b6003546040516301e3366760e01b81526001600160a01b038581166004830152848116602483015260448201849052909116906301e33667906064015f604051808303815f87803b158015610388575f80fd5b505af115801561039a573d5f803e3d5ffd5b50505050505050565b6103ab61110c565b60035460405163f3fef3a360e01b81526001600160a01b038481166004830152602482018490529091169063f3fef3a3906044015f604051808303815f87803b1580156103f6575f80fd5b505af1158015610408573d5f803e3d5ffd5b505050505050565b606061041a61110c565b600180548060200260200160405190810160405280929190818152602001828054801561046e57602002820191905f5260205f20905b81546001600160a01b03168152600190910190602001808311610450575b5050505050905090565b61048061110c565b60025460035461049d916001600160a01b03908116911683611138565b50565b60606104aa61110c565b6004545f9067ffffffffffffffff8111156104c7576104c76115f6565b60405190808252806020026020018201604052801561050b57816020015b604080518082019091525f80825260208201528152602001906001900390816104e55790505b5090505f5b600454811015610594575f6004828154811061052e5761052e6118fc565b5f9182526020822001546001600160a01b0316915061054d8683610fd6565b90506040518060400160405280836001600160a01b031681526020018281525084848151811061057f5761057f6118fc565b60209081029190910101525050600101610510565b5092915050565b6105a361110c565b6105ac5f611376565b565b6105b661110c565b5f805b82518110156105f5578281815181106105d4576105d46118fc565b602002602001015160200151826105eb9190611924565b91506001016105b9565b506003546001600160a01b03163181111561064e5760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b60448201526064015b60405180910390fd5b6003546001600160a01b03165f5b835181101561071957816001600160a01b031663f3fef3a3858381518110610686576106866118fc565b60200260200101515f01518684815181106106a3576106a36118fc565b6020026020010151602001516040518363ffffffff1660e01b81526004016106e09291906001600160a01b03929092168252602082015260400190565b5f604051808303815f87803b1580156106f7575f80fd5b505af1158015610709573d5f803e3d5ffd5b50506001909201915061065c9050565b50505050565b61072761110c565b60025461073e906001600160a01b03168383611138565b5050565b5f61074b61110c565b5f6107546113c5565b6001805480820182555f919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b03831617905592915050565b6107ab61110c565b600480546001810182555f919091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b0319166001600160a01b0392909216919091179055565b606061080661110c565b5f8267ffffffffffffffff811115610820576108206115f6565b604051908082528060200260200182016040528015610849578160200160208202803683370190505b5090505f5b83811015610594575f61085f6113c5565b6001805480820182555f919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b038316179055835190915081908490849081106108c1576108c16118fc565b6001600160a01b03909216602092830291909101909101525060010161084e565b6108ea61110c565b5f805b825181101561092957828181518110610908576109086118fc565b6020026020010151602001518261091f9190611924565b91506001016108ed565b506003546040516370a0823160e01b81526001600160a01b0391821660048201525f918516906370a0823190602401602060405180830381865afa158015610973573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109979190611937565b9050818110156109e05760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606401610645565b6003546001600160a01b03165f5b845181101561040857816001600160a01b03166301e3366787878481518110610a1957610a196118fc565b60200260200101515f0151888581518110610a3657610a366118fc565b60209081029190910181015101516040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064015f604051808303815f87803b158015610a90575f80fd5b505af1158015610aa2573d5f803e3d5ffd5b5050600190920191506109ee9050565b5f610abb61110c565b5f610ac46113c5565b6002549091506001600160a01b031615610b12575f610ae16113fd565b600254909150610afb906001600160a01b03168383611138565b600254610b10906001600160a01b03166114d8565b505b600280546001600160a01b039092166001600160a01b031990921682179055905090565b610b3e61110c565b5f5b815181101561073e57818181518110610b5b57610b5b6118fc565b60200260200101516001600160a01b0316637382f13b6040518163ffffffff1660e01b81526004015f604051808303815f87803b158015610b9a575f80fd5b505af1158015610bac573d5f803e3d5ffd5b505050506001828281518110610bc457610bc46118fc565b6020908102919091018101518254600180820185555f9485529290932090920180546001600160a01b0319166001600160a01b039093169290921790915501610b40565b610c1061110c565b5f5b60045481101561073e57816001600160a01b031660048281548110610c3957610c396118fc565b5f918252602090912001546001600160a01b031603610cfd5760048054610c629060019061194e565b81548110610c7257610c726118fc565b5f91825260209091200154600480546001600160a01b039092169183908110610c9d57610c9d6118fc565b905f5260205f20015f6101000a8154816001600160a01b0302191690836001600160a01b031602179055506004805480610cd957610cd9611961565b5f8281526020902081015f1990810180546001600160a01b03191690550190555050565b600101610c12565b610d0d61110c565b5f610d166113fd565b90505b6001541561049d57600180545f9190610d3390829061194e565b81548110610d4357610d436118fc565b5f918252602090912001546002546001600160a01b039182169250610d6b9183911684611138565b610d74816114d8565b6001805480610d8557610d85611961565b5f8281526020902081015f1990810180546001600160a01b031916905501905550610d19565b6060610db561110c565b600480548060200260200160405190810160405280929190818152602001828054801561046e57602002820191905f5260205f209081546001600160a01b03168152600190910190602001808311610450575050505050905090565b5f610e1a61110c565b506002546001600160a01b031690565b610e3261110c565b5f5b60015481101561073e57610e7560018281548110610e5457610e546118fc565b5f918252602090912001546002546001600160a01b03918216911684611138565b600101610e34565b610e8561110c565b5f610e8e6113fd565b90505f5b600154811015610f9757826001600160a01b031660018281548110610eb957610eb96118fc565b5f918252602090912001546001600160a01b031603610f8f5760018054610ee190829061194e565b81548110610ef157610ef16118fc565b5f91825260209091200154600180546001600160a01b039092169183908110610f1c57610f1c6118fc565b5f91825260209091200180546001600160a01b0319166001600160a01b03928316179055600254610f509185911684611138565b610f59836114d8565b6001805480610f6a57610f6a611961565b5f8281526020902081015f1990810180546001600160a01b0319169055019055505050565b600101610e92565b505050565b610fa461110c565b6001600160a01b038116610fcd57604051631e4fbdf760e01b81525f6004820152602401610645565b61049d81611376565b5f610fdf61110c565b6001600160a01b038216610ffe57506001600160a01b03821631611069565b6040516370a0823160e01b81526001600160a01b0384811660048301528316906370a0823190602401602060405180830381865afa158015611042573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110669190611937565b90505b92915050565b5f61107861110c565b5f6110816113c5565b6003549091506001600160a01b0316156110cf575f61109e6113fd565b6003549091506110b8906001600160a01b03168383611138565b6003546110cd906001600160a01b03166114d8565b505b600380546001600160a01b039092166001600160a01b031990921682179055905090565b5f6110fc61110c565b506003546001600160a01b031690565b5f546001600160a01b031633146105ac5760405163118cdaa760e01b8152336004820152602401610645565b825f5b825181101561136f575f6001600160a01b0316838281518110611160576111606118fc565b60200260200101515f01516001600160a01b031603611219576001600160a01b0385163180158015906111b057508382815181106111a0576111a06118fc565b6020026020010151602001518110155b156112135760405163f3fef3a360e01b81526001600160a01b0386811660048301526024820183905284169063f3fef3a3906044015f604051808303815f87803b1580156111fc575f80fd5b505af115801561120e573d5f803e3d5ffd5b505050505b50611367565b5f83828151811061122c5761122c6118fc565b6020908102919091010151516040516370a0823160e01b81526001600160a01b038881166004830152909116906370a0823190602401602060405180830381865afa15801561127d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906112a19190611937565b90505f811180156112cf57508382815181106112bf576112bf6118fc565b6020026020010151602001518110155b1561136557826001600160a01b03166301e336678584815181106112f5576112f56118fc565b6020908102919091010151516040516001600160e01b031960e084901b1681526001600160a01b0391821660048201529088166024820152604481018490526064015f604051808303815f87803b15801561134e575f80fd5b505af1158015611360573d5f803e3d5ffd5b505050505b505b60010161113b565b5050505050565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b5f80306040516113d490611522565b6001600160a01b039091168152602001604051809103905ff080158015610594573d5f803e3d5ffd5b6004546060905f9067ffffffffffffffff81111561141d5761141d6115f6565b60405190808252806020026020018201604052801561146157816020015b604080518082019091525f808252602082015281526020019060019003908161143b5790505b5090505f5b6004548110156114d25760405180604001604052806004838154811061148e5761148e6118fc565b5f9182526020808320909101546001600160a01b03168352919091015282518390839081106114bf576114bf6118fc565b6020908102919091010152600101611466565b50919050565b806001600160a01b03166383197ef06040518163ffffffff1660e01b81526004015f604051808303815f87803b158015611510575f80fd5b505af115801561136f573d5f803e3d5ffd5b6105be8061197683390190565b6001600160a01b038116811461049d575f80fd5b5f805f60608486031215611555575f80fd5b83356115608161152f565b925060208401356115708161152f565b929592945050506040919091013590565b5f8060408385031215611592575f80fd5b823561159d8161152f565b946020939093013593505050565b602080825282518282018190525f918401906040840190835b818110156115eb5783516001600160a01b03168352602093840193909201916001016115c4565b509095945050505050565b634e487b7160e01b5f52604160045260245ffd5b6040805190810167ffffffffffffffff8111828210171561162d5761162d6115f6565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561165c5761165c6115f6565b604052919050565b5f67ffffffffffffffff82111561167d5761167d6115f6565b5060051b60200190565b5f82601f830112611696575f80fd5b81356116a96116a482611664565b611633565b8082825260208201915060208360061b8601019250858311156116ca575f80fd5b602085015b8381101561171557604081880312156116e6575f80fd5b6116ee61160a565b81356116f98161152f565b81526020828101358183015290845292909201916040016116cf565b5095945050505050565b5f6020828403121561172f575f80fd5b813567ffffffffffffffff811115611745575f80fd5b61175184828501611687565b949350505050565b5f60208284031215611769575f80fd5b81356117748161152f565b9392505050565b602080825282518282018190525f918401906040840190835b818110156115eb57835180516001600160a01b031684526020908101518185015290930192604090920191600101611794565b5f80604083850312156117d8575f80fd5b82356117e38161152f565b9150602083013567ffffffffffffffff8111156117fe575f80fd5b61180a85828601611687565b9150509250929050565b5f60208284031215611824575f80fd5b5035919050565b5f6020828403121561183b575f80fd5b813567ffffffffffffffff811115611851575f80fd5b8201601f81018413611861575f80fd5b803561186f6116a482611664565b8082825260208201915060208360051b850101925086831115611890575f80fd5b6020840193505b828410156118bb5783356118aa8161152f565b825260209384019390910190611897565b9695505050505050565b5f80604083850312156118d6575f80fd5b82356118e18161152f565b915060208301356118f18161152f565b809150509250929050565b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b8082018082111561106957611069611910565b5f60208284031215611947575f80fd5b5051919050565b8181038181111561106957611069611910565b634e487b7160e01b5f52603160045260245ffdfe60806040525f805460ff60a01b19169055348015601a575f80fd5b506040516105be3803806105be833981016040819052603791605a565b5f80546001600160a01b0319166001600160a01b03929092169190911790556085565b5f602082840312156069575f80fd5b81516001600160a01b0381168114607e575f80fd5b9392505050565b61052c806100925f395ff3fe608060405260043610610057575f3560e01c806301e33667146100625780635c975abb146100835780637382f13b146100b757806383197ef0146100cb5780638da5cb5b146100df578063f3fef3a314610115575f80fd5b3661005e57005b5f80fd5b34801561006d575f80fd5b5061008161007c366004610444565b610134565b005b34801561008e575f80fd5b505f546100a290600160a01b900460ff1681565b60405190151581526020015b60405180910390f35b3480156100c2575f80fd5b506100816102bd565b3480156100d6575f80fd5b506100816102f4565b3480156100ea575f80fd5b505f546100fd906001600160a01b031681565b6040516001600160a01b0390911681526020016100ae565b348015610120575f80fd5b5061008161012f366004610482565b610331565b5f546001600160a01b031633146101665760405162461bcd60e51b815260040161015d906104ac565b60405180910390fd5b5f54600160a01b900460ff16156101bf5760405162461bcd60e51b815260206004820152601c60248201527f4d757374206265207573656420776974686f75742070617573696e6700000000604482015260640161015d565b7319c0947b0e1169c00854caf563e20d742c462ee5196001600160a01b038416016102465760405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb906044015f604051808303815f87803b15801561022b575f80fd5b505af115801561023d573d5f803e3d5ffd5b50505050505050565b60405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb906044016020604051808303815f875af1158015610292573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102b691906104d0565b505b505050565b5f546001600160a01b031633146102e65760405162461bcd60e51b815260040161015d906104ac565b5f805460ff60a01b19169055565b5f546001600160a01b0316331461031d5760405162461bcd60e51b815260040161015d906104ac565b5f805460ff60a01b1916600160a01b179055565b5f546001600160a01b0316331461035a5760405162461bcd60e51b815260040161015d906104ac565b5f54600160a01b900460ff16156103b35760405162461bcd60e51b815260206004820152601c60248201527f4d757374206265207573656420776974686f75742070617573696e6700000000604482015260640161015d565b804710156103fa5760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b604482015260640161015d565b6040516001600160a01b0383169082156108fc029083905f818181858888f193505050501580156102b8573d5f803e3d5ffd5b6001600160a01b0381168114610441575f80fd5b50565b5f805f60608486031215610456575f80fd5b83356104618161042d565b925060208401356104718161042d565b929592945050506040919091013590565b5f8060408385031215610493575f80fd5b823561049e8161042d565b946020939093013593505050565b6020808252600a90820152696e6f74206f776e65722160b01b604082015260600190565b5f602082840312156104e0575f80fd5b815180151581146104ef575f80fd5b939250505056fea2646970667358221220f59a889f680c8282767895f6fec4c47a300fa748435c1ac3b0b6d375a7e531e364736f6c634300081a0033a2646970667358221220d224dd31350aeab862abd1338ab1b85b2a2b98799d3beb505af232753ca7377264736f6c634300081a003360806040525f805460ff60a01b19169055348015601a575f80fd5b506040516105be3803806105be833981016040819052603791605a565b5f80546001600160a01b0319166001600160a01b03929092169190911790556085565b5f602082840312156069575f80fd5b81516001600160a01b0381168114607e575f80fd5b9392505050565b61052c806100925f395ff3fe608060405260043610610057575f3560e01c806301e33667146100625780635c975abb146100835780637382f13b146100b757806383197ef0146100cb5780638da5cb5b146100df578063f3fef3a314610115575f80fd5b3661005e57005b5f80fd5b34801561006d575f80fd5b5061008161007c366004610444565b610134565b005b34801561008e575f80fd5b505f546100a290600160a01b900460ff1681565b60405190151581526020015b60405180910390f35b3480156100c2575f80fd5b506100816102bd565b3480156100d6575f80fd5b506100816102f4565b3480156100ea575f80fd5b505f546100fd906001600160a01b031681565b6040516001600160a01b0390911681526020016100ae565b348015610120575f80fd5b5061008161012f366004610482565b610331565b5f546001600160a01b031633146101665760405162461bcd60e51b815260040161015d906104ac565b60405180910390fd5b5f54600160a01b900460ff16156101bf5760405162461bcd60e51b815260206004820152601c60248201527f4d757374206265207573656420776974686f75742070617573696e6700000000604482015260640161015d565b7319c0947b0e1169c00854caf563e20d742c462ee5196001600160a01b038416016102465760405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb906044015f604051808303815f87803b15801561022b575f80fd5b505af115801561023d573d5f803e3d5ffd5b50505050505050565b60405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb906044016020604051808303815f875af1158015610292573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102b691906104d0565b505b505050565b5f546001600160a01b031633146102e65760405162461bcd60e51b815260040161015d906104ac565b5f805460ff60a01b19169055565b5f546001600160a01b0316331461031d5760405162461bcd60e51b815260040161015d906104ac565b5f805460ff60a01b1916600160a01b179055565b5f546001600160a01b0316331461035a5760405162461bcd60e51b815260040161015d906104ac565b5f54600160a01b900460ff16156103b35760405162461bcd60e51b815260206004820152601c60248201527f4d757374206265207573656420776974686f75742070617573696e6700000000604482015260640161015d565b804710156103fa5760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b604482015260640161015d565b6040516001600160a01b0383169082156108fc029083905f818181858888f193505050501580156102b8573d5f803e3d5ffd5b6001600160a01b0381168114610441575f80fd5b50565b5f805f60608486031215610456575f80fd5b83356104618161042d565b925060208401356104718161042d565b929592945050506040919091013590565b5f8060408385031215610493575f80fd5b823561049e8161042d565b946020939093013593505050565b6020808252600a90820152696e6f74206f776e65722160b01b604082015260600190565b5f602082840312156104e0575f80fd5b815180151581146104ef575f80fd5b939250505056fea2646970667358221220f59a889f680c8282767895f6fec4c47a300fa748435c1ac3b0b6d375a7e531e364736f6c634300081a0033";

    private static String librariesLinkedBinary;

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BALANCEOFTOKEN = "balanceOfToken";

    public static final String FUNC_COLLECT = "collect";

    public static final String FUNC_COLLECT2STORAGE = "collect2storage";

    public static final String FUNC_COLLECT2WITHDRAW = "collect2withdraw";

    public static final String FUNC_GENERATEUSERWALLET = "generateUserWallet";

    public static final String FUNC_GENERATEUSERWALLETBATCH = "generateUserWalletBatch";

    public static final String FUNC_GETCOLLECTWALLET = "getCollectWallet";

    public static final String FUNC_GETTOKENCONTRACTS = "getTokenContracts";

    public static final String FUNC_GETUSERWALLETS = "getUserWallets";

    public static final String FUNC_GETWITHDRAWWALLET = "getWithdrawWallet";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_POPTOKENCONTRACTS = "popTokenContracts";

    public static final String FUNC_PUSHTOKENCONTRACTS = "pushTokenContracts";

    public static final String FUNC_REENABLEUSERWALLET = "reEnableUserWallet";

    public static final String FUNC_REGENERATECOLLECTWALLET = "reGenerateCollectWallet";

    public static final String FUNC_REGENERATEWITHDRAWWALLET = "reGenerateWithdrawWallet";

    public static final String FUNC_RECYCLEUSERWALLET = "recycleUserWallet";

    public static final String FUNC_RECYCLEUSERWALLETS = "recycleUserWallets";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_WITHDRAWETH = "withdrawETH";

    public static final String FUNC_WITHDRAWETHBATCH = "withdrawETHBatch";

    public static final String FUNC_WITHDRAWTOKEN = "withdrawToken";

    public static final String FUNC_WITHDRAWTOKENBATCH = "withdrawTokenBatch";

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    @Deprecated
    protected WalletManagerContract(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected WalletManagerContract(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected WalletManagerContract(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected WalletManagerContract(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
        OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public RemoteFunctionCall<List> balanceOf(String _wallet) {
        final Function function = new Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _wallet)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<TokenBalance>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> balanceOfToken(String _wallet, String token) {
        final Function function = new Function(FUNC_BALANCEOFTOKEN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _wallet), 
                new org.web3j.abi.datatypes.Address(160, token)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> collect(List<CollectMeta> collectMatas) {
        final Function function = new Function(
                FUNC_COLLECT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<CollectMeta>(CollectMeta.class, collectMatas)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> collect2storage(String storageWallet,
            List<CollectMeta> collectMatas) {
        final Function function = new Function(
                FUNC_COLLECT2STORAGE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, storageWallet), 
                new org.web3j.abi.datatypes.DynamicArray<CollectMeta>(CollectMeta.class, collectMatas)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> collect2withdraw(List<CollectMeta> collectMatas) {
        final Function function = new Function(
                FUNC_COLLECT2WITHDRAW, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<CollectMeta>(CollectMeta.class, collectMatas)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> generateUserWallet() {
        final Function function = new Function(
                FUNC_GENERATEUSERWALLET, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> generateUserWalletBatch(BigInteger count) {
        final Function function = new Function(
                FUNC_GENERATEUSERWALLETBATCH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(count)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> getCollectWallet() {
        final Function function = new Function(FUNC_GETCOLLECTWALLET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<List> getTokenContracts() {
        final Function function = new Function(FUNC_GETTOKENCONTRACTS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getUserWallets() {
        final Function function = new Function(FUNC_GETUSERWALLETS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<String> getWithdrawWallet() {
        final Function function = new Function(FUNC_GETWITHDRAWWALLET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> popTokenContracts(String token) {
        final Function function = new Function(
                FUNC_POPTOKENCONTRACTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, token)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> pushTokenContracts(String token) {
        final Function function = new Function(
                FUNC_PUSHTOKENCONTRACTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, token)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> reEnableUserWallet(List<String> _addrArr) {
        final Function function = new Function(
                FUNC_REENABLEUSERWALLET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(_addrArr, org.web3j.abi.datatypes.Address.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> reGenerateCollectWallet() {
        final Function function = new Function(
                FUNC_REGENERATECOLLECTWALLET, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> reGenerateWithdrawWallet() {
        final Function function = new Function(
                FUNC_REGENERATEWITHDRAWWALLET, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> recycleUserWallet(String _addr) {
        final Function function = new Function(
                FUNC_RECYCLEUSERWALLET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _addr)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> recycleUserWallets() {
        final Function function = new Function(
                FUNC_RECYCLEUSERWALLETS, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> withdrawETH(String toAddr, BigInteger amount) {
        final Function function = new Function(
                FUNC_WITHDRAWETH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, toAddr), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> withdrawETHBatch(List<WithdrawMeta> wdArr) {
        final Function function = new Function(
                FUNC_WITHDRAWETHBATCH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<WithdrawMeta>(WithdrawMeta.class, wdArr)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> withdrawToken(String token, String toAddr,
            BigInteger amount) {
        final Function function = new Function(
                FUNC_WITHDRAWTOKEN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, token), 
                new org.web3j.abi.datatypes.Address(160, toAddr), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> withdrawTokenBatch(String token,
            List<WithdrawMeta> wdArr) {
        final Function function = new Function(
                FUNC_WITHDRAWTOKENBATCH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, token), 
                new org.web3j.abi.datatypes.DynamicArray<WithdrawMeta>(WithdrawMeta.class, wdArr)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static WalletManagerContract load(String contractAddress, Web3j web3j,
            Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new WalletManagerContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static WalletManagerContract load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new WalletManagerContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static WalletManagerContract load(String contractAddress, Web3j web3j,
            Credentials credentials, ContractGasProvider contractGasProvider) {
        return new WalletManagerContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static WalletManagerContract load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new WalletManagerContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<WalletManagerContract> deploy(Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        return deployRemoteCall(WalletManagerContract.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), "");
    }

    public static RemoteCall<WalletManagerContract> deploy(Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(WalletManagerContract.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), "");
    }

    @Deprecated
    public static RemoteCall<WalletManagerContract> deploy(Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(WalletManagerContract.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), "");
    }

    @Deprecated
    public static RemoteCall<WalletManagerContract> deploy(Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(WalletManagerContract.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), "");
    }

    public static void linkLibraries(List<Contract.LinkReference> references) {
        librariesLinkedBinary = linkBinaryWithReferences(BINARY, references);
    }

    private static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    public static class TokenBalance extends StaticStruct {
        public String token;

        public BigInteger balance;

        public TokenBalance(String token, BigInteger balance) {
            super(new org.web3j.abi.datatypes.Address(160, token), 
                    new org.web3j.abi.datatypes.generated.Uint256(balance));
            this.token = token;
            this.balance = balance;
        }

        public TokenBalance(Address token, Uint256 balance) {
            super(token, balance);
            this.token = token.getValue();
            this.balance = balance.getValue();
        }
    }

    public static class CollectMeta extends StaticStruct {
        public String token;

        public BigInteger limit;

        public CollectMeta(String token, BigInteger limit) {
            super(new org.web3j.abi.datatypes.Address(160, token), 
                    new org.web3j.abi.datatypes.generated.Uint256(limit));
            this.token = token;
            this.limit = limit;
        }

        public CollectMeta(Address token, Uint256 limit) {
            super(token, limit);
            this.token = token.getValue();
            this.limit = limit.getValue();
        }
    }

    public static class WithdrawMeta extends StaticStruct {
        public String toAddr;

        public BigInteger amount;

        public WithdrawMeta(String toAddr, BigInteger amount) {
            super(new org.web3j.abi.datatypes.Address(160, toAddr), 
                    new org.web3j.abi.datatypes.generated.Uint256(amount));
            this.toAddr = toAddr;
            this.amount = amount;
        }

        public WithdrawMeta(Address toAddr, Uint256 amount) {
            super(toAddr, amount);
            this.toAddr = toAddr.getValue();
            this.amount = amount.getValue();
        }
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }
}
